/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id "java"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "1.5.30"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = "SpecialisedCrates"
group = "me.ztowne13"
version = "2.14.0-DEV"
sourceCompatibility = JavaVersion.VERSION_1_8

ext {
    base = "me.ztowne13.customcrates.shaded."
}

repositories {
    mavenCentral()
    maven {
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven {
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }

    maven {
        url = "https://oss.sonatype.org/content/repositories/central"
    }

    maven {
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }

    maven {
        url = "https://repo.citizensnpcs.co/"
    }

    maven {
        url = "https://repo.codemc.io/repository/maven-releases/"
    }

    maven {
        url = "https://jitpack.io"
    }

    maven {
        url = "https://repo.codemc.org/repository/maven-public/"
        content {
            includeGroup("org.codemc.worldguardwrapper")
        }
    }

    maven {
        url = "https://repo.aikar.co/content/groups/aikar/"
        content {
            includeGroup("co.aikar")
        }
    }

    maven {
        url = "https://repo.mattstudios.me/artifactory/public/"
    }

    maven {
        url = "https://repo.vshnv.tech/"
    }

    maven {
        url = "https://repo.mattstudios.me/artifactory/public/"
    }

}

shadowJar {
    relocate("org.bstats", "${base}bstats")
    relocate("com.zaxxer.hikari", "${base}hikari")
    relocate("com.github", "${base}xseries")
    relocate("net.kyori", "${base}kyori")
    relocate("dev.triumphteam.gui", "${base}gui")
    relocate("co.aikar.commands", "${base}acf")
    relocate("com.okkero", "${base}scheduler")
    relocate("ch.jalu.configme", "${base}configme")

    archiveFileName = "SpecialisedCrates-${project.version}.jar"

}

dependencies {
    // Command Handling
    implementation("co.aikar:acf-paper:0.5.0-SNAPSHOT")

    // Configuration Lib
    implementation("ch.jalu:configme:1.2.0")

    // Bstats Data Collecting
    implementation("org.bstats:bstats-bukkit:2.2.1")

    // Cross-Version Support
    implementation('com.github.cryptomorin:XSeries:8.4.0')

    // Adventure and MiniMessage
    implementation('net.kyori:adventure-platform-bukkit:4.0.0')

    // GUIs
    implementation("dev.triumphteam:triumph-gui:3.0.3")

    // Database Stuff
    implementation('com.zaxxer:HikariCP:5.0.0')

    // Logger
    implementation('org.slf4j:slf4j-api:1.7.32')

    // Kotlin collections
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.30')

    // Coroutines Duh
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt')
    implementation files("E:/Documents/Dependancies/skedule-1.2.6.jar")

    // Gson
    implementation("com.google.code.gson:gson:2.8.8")

    // Bukkit Version
    compileOnly("org.spigotmc:spigot-api:1.17.1-R0.1-SNAPSHOT")

    // Vault Support
    compileOnly("com.github.MilkBowl:VaultAPI:1.7.1")

    // Citizens Support
    compileOnly("net.citizensnpcs:citizens:2.0.27-SNAPSHOT")

    // Hologram Support
    compileOnly("com.sainttx.holograms:holograms:2.13")
    compileOnly("com.gmail.filoghost.holographicdisplays:holographicdisplays-api:2.4.4")

    // PlaceholderAPI
    compileOnly("me.clip:placeholderapi:2.10.10")
}

sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
    kotlinOptions.javaParameters = true
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    filter ReplaceTokens, tokens: [version: version]
}